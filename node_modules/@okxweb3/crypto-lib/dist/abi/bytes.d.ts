/// <reference types="node" />
import type { NestedBufferArray, NestedUint8Array, PrefixedHexString, TransformableToArray, TransformableToBuffer } from './types';
export declare const intToHex: (i: number) => string;
export declare const intToBuffer: (i: number) => Buffer;
export declare const zeros: (bytes: number) => Buffer;
export declare const setLengthLeft: (msg: Buffer, length: number) => Buffer;
export declare const setLengthRight: (msg: Buffer, length: number) => Buffer;
export declare const unpadBuffer: (a: Buffer) => Buffer;
export declare const unpadArray: (a: number[]) => number[];
export declare const unpadHexString: (a: string) => string;
export type ToBufferInputTypes = PrefixedHexString | number | bigint | Buffer | Uint8Array | number[] | TransformableToArray | TransformableToBuffer | null | undefined;
export declare const toBuffer: (v: ToBufferInputTypes) => Buffer;
export declare const bufferToHex: (buf: Buffer) => string;
export declare function bufferToBigInt(buf: Buffer): bigint;
export declare function bigIntToBuffer(num: bigint): Buffer;
export declare const bufferToInt: (buf: Buffer) => number;
export declare const fromSigned: (num: Buffer) => bigint;
export declare const toUnsigned: (num: bigint) => Buffer;
export declare const addHexPrefix: (str: string) => string;
export declare function short(buffer: Buffer | string, maxLength?: number): string;
export declare const toUtf8: (hex: string) => string;
export declare const baToJSON: (ba: any) => any;
export declare const validateNoLeadingZeroes: (values: {
    [key: string]: Buffer | undefined;
}) => void;
export declare function arrToBufArr(arr: Uint8Array): Buffer;
export declare function arrToBufArr(arr: NestedUint8Array): NestedBufferArray;
export declare function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray;
export declare function bufArrToArr(arr: Buffer): Uint8Array;
export declare function bufArrToArr(arr: NestedBufferArray): NestedUint8Array;
export declare function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array;
export declare const bigIntToHex: (num: bigint) => string;
export declare function bigIntToUnpaddedBuffer(value: bigint): Buffer;
export declare function intToUnpaddedBuffer(value: number): Buffer;
