import { CalcTxHashParams, DerivePriKeyParams, GetDerivedPathParam, NewAddressParams, SignTxParams, ValidAddressParams, ValidPrivateKeyData, ValidPrivateKeyParams, GetAddressParams, MpcRawTransactionParam, MpcTransactionParam, VerifyMessageParams, ValidSignedTransactionParams, MpcMessageParam, BaseWallet } from '@okxweb3/coin-base';
import * as bitcoin from "./index";
export declare function convert2UtxoTx(utxoTx: any): bitcoin.utxoTx;
export declare const BITCOIN_MESSAGE_ECDSA = 0;
export declare const BITCOIN_MESSAGE_BIP0322_SIMPLE = 1;
export declare class BtcWallet extends BaseWallet {
    network(): bitcoin.networks.Network;
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    validPrivateKey(param: ValidPrivateKeyParams): Promise<ValidPrivateKeyData>;
    getNewAddress(param: NewAddressParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    getRandomPrivateKey(): Promise<any>;
    getDerivedPrivateKey(param: DerivePriKeyParams): Promise<any>;
    getAddressByPublicKey(param: GetAddressParams): Promise<any>;
    getMPCRawTransaction(param: MpcRawTransactionParam): Promise<any>;
    getMPCTransaction(param: MpcTransactionParam): Promise<any>;
    getMPCRawMessage(param: MpcRawTransactionParam): Promise<any>;
    getMPCSignedMessage(param: MpcMessageParam): Promise<any>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
    calcTxHash(param: CalcTxHashParams): Promise<string>;
    signMessage(param: SignTxParams): Promise<string>;
    verifyMessage(param: VerifyMessageParams): Promise<boolean>;
    static extractPsbtTransaction(txHex: string): Promise<string>;
    validSignedTransaction(param: ValidSignedTransactionParams): Promise<any>;
    estimateFee(param: SignTxParams): Promise<number>;
    static oneKeyBuildBtcTx(txData: bitcoin.utxoTx): Promise<any>;
}
export declare class TBtcWallet extends BtcWallet {
    network(): bitcoin.networks.Network;
}
export declare function number2Hex(n: number, length: number): string;
export declare class UsdtWallet extends BtcWallet {
    signTransaction(param: SignTxParams): Promise<any>;
    estimateFee(param: SignTxParams): Promise<number>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
}
export declare class UsdtTestWallet extends UsdtWallet {
    network(): bitcoin.networks.Network;
}
export declare const litecoin: bitcoin.Network;
export declare class LtcWallet extends BtcWallet {
    network(): bitcoin.networks.Network;
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
}
export declare class BchWallet extends BtcWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    getNewAddress(param: NewAddressParams): Promise<any>;
    validAddress(param: ValidAddressParams): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    estimateFee(param: SignTxParams): Promise<number>;
    getMPCRawTransaction(param: SignTxParams): Promise<any>;
    getAddressByPublicKey(param: GetAddressParams): Promise<string>;
    getMPCTransaction(param: MpcTransactionParam): Promise<any>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
}
export declare class BsvWallet extends BtcWallet {
    getDerivedPath(param: GetDerivedPathParam): Promise<any>;
    signTransaction(param: SignTxParams): Promise<any>;
    estimateFee(param: SignTxParams): Promise<number>;
    getMPCRawTransaction(param: SignTxParams): Promise<any>;
    getMPCTransaction(param: MpcTransactionParam): Promise<any>;
    getHardWareRawTransaction(param: SignTxParams): Promise<any>;
}
export declare const dogeCoin: bitcoin.Network;
export declare class DogeWallet extends BtcWallet {
    network(): bitcoin.networks.Network;
}
